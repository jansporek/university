"use strict";(self.webpackChunkcookbook=self.webpackChunkcookbook||[]).push([[1480],{8033:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=o(5893),a=o(1151);const r={sidebar_position:1,title:"Configuration examples"},s=void 0,i={id:"extensions/find-replace-values/configuration-examples",title:"Configuration examples",description:"Normalize Values",source:"@site/docs/extensions/find-replace-values/configuration-examples.md",sourceDirName:"extensions/find-replace-values",slug:"/extensions/find-replace-values/configuration-examples",permalink:"/cookbook/docs/extensions/find-replace-values/configuration-examples",draft:!1,unlisted:!1,editUrl:"https://github.com/rossumai-community/cookbook/tree/master/docs/extensions/find-replace-values/configuration-examples.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Configuration examples"},sidebar:"extensionsSidebar",previous:{title:"Find & Replace Values",permalink:"/cookbook/docs/category/find--replace-values"}},l={},c=[{value:"Normalize Values",id:"normalize-values",level:2},{value:"Prepend and Append Values",id:"prepend-and-append-values",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"normalize-values",children:"Normalize Values"}),"\n",(0,t.jsxs)(n.p,{children:["The following snippet removes all non-alphanumeric characters. The source datapoint ID is ",(0,t.jsx)(n.code,{children:"sender_vat_id"})," and the result has to be written to a different datapoint ID ",(0,t.jsx)(n.code,{children:"sender_vat_id_normalized"})," not to affect the AI model."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "actions": [\n    {\n      "transformations": [\n        {\n          "pattern_to_replace": "[^a-zA-Z\\\\d]",\n          "value_to_replace_with": ""\n        }\n      ],\n      "source_target_mappings": [\n        {\n          "source": "sender_vat_id",\n          "target": "sender_vat_id_normalized"\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"prepend-and-append-values",children:"Prepend and Append Values"}),"\n",(0,t.jsxs)(n.p,{children:["The regular expressions use Python flavor which allows us to write references to capture groups as ",(0,t.jsx)(n.code,{children:"\\g<0>"}),", ",(0,t.jsx)(n.code,{children:"\\g<1>"}),", etc. The following example transforms order ID from ",(0,t.jsx)(n.code,{children:"123"})," to ",(0,t.jsx)(n.code,{children:"PO123/000"})," as an example (first prepend, later append):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "actions": [\n    {\n      "transformations": [\n        {\n          "pattern_to_replace": "^(?!PO)(.*)$",\n          "value_to_replace_with": "PO\\\\g<1>",\n          "replace_if_this_pattern_matches": "^(?!PO).*$"\n        },\n        {\n          "pattern_to_replace": "^(.*)(?<!/000)$",\n          "value_to_replace_with": "\\\\g<1>/000",\n          "replace_if_this_pattern_matches": "^.*(?<!/000)$"\n        }\n      ],\n      "source_target_mappings": [\n        {\n          "source": "order_id",\n          "target": "order_id_normalized"\n        }\n      ]\n    }\n  ]\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>s});var t=o(7294);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);