"use strict";(self.webpackChunkuniversity=self.webpackChunkuniversity||[]).push([[5162],{9492:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var i=t(5893),o=t(1151);const a={sidebar_position:1,title:"Configuration examples"},r=void 0,s={id:"extensions/formula-fields/configuration-examples",title:"Configuration examples",description:"Examples of common formula fields.",source:"@site/docs/extensions/formula-fields/configuration-examples.md",sourceDirName:"extensions/formula-fields",slug:"/extensions/formula-fields/configuration-examples",permalink:"/docs/extensions/formula-fields/configuration-examples",draft:!1,unlisted:!1,editUrl:"https://github.com/rossumai-community/university/tree/master/docs/extensions/formula-fields/configuration-examples.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Configuration examples"},sidebar:"extensionsSidebar",previous:{title:"Formula fields",permalink:"/docs/extensions/formula-fields/"},next:{title:"Generic REST API export",permalink:"/docs/extensions/generic-rest-api-export/"}},l={},d=[{value:"Copy fields conditionally",id:"copy-fields-conditionally",level:2},{value:"Generate NetSuite external IDs",id:"generate-netsuite-external-ids",level:2},{value:"Normalize field value",id:"normalize-field-value",level:2},{value:"Validations",id:"validations",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Examples of common formula fields."}),"\n",(0,i.jsx)(n.h2,{id:"copy-fields-conditionally",children:"Copy fields conditionally"}),"\n",(0,i.jsxs)(n.p,{children:["Copy ",(0,i.jsx)(n.code,{children:"order_id"})," into another field but prioritize ",(0,i.jsx)(n.code,{children:"order_id_manual"})," datapoint if it exists:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"field.order_id_manual if not is_empty(field.order_id_manual) else field.order_id\n"})}),"\n",(0,i.jsx)(n.h2,{id:"generate-netsuite-external-ids",children:"Generate NetSuite external IDs"}),"\n",(0,i.jsxs)(n.p,{children:["Create external ID needed by NetSuite for ",(0,i.jsx)(n.em,{children:"VendorBill"})," and ",(0,i.jsx)(n.em,{children:"VendorCredit"})," records:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"# Convert document type to lower case for standardization\ndocument_type = field.document_type.lower()\n\n# Create an external ID by combining document ID and entity (vendor) match\nexternal_id = f\"{field.document_id}_{field.ns_entity_match}\"\n\n# Map of document types to their corresponding prefixes\nprefix_map = {\n    'credit_note': '__rossum_vc_',\n    'tax_invoice': '__rossum_vb_'\n}\n\n# Retrieve the prefix for the document type, default to a general prefix if not found\nprefix = prefix_map.get(document_type, '__rossum_')\n\n# Construct the final result by concatenating prefix and external ID\nresult = f\"{prefix}{external_id}\"\n\nresult\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This is typically necessary when ",(0,i.jsx)(n.a,{href:"../netsuite/export-configuration#vendor-bills-invoices",children:"exporting records into NetSuite"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"normalize-field-value",children:"Normalize field value"}),"\n",(0,i.jsx)(n.p,{children:'Remove non-alphanumeric characters (except "-" and "_"):'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'substitute(r"[^a-zA-Z\\d\\-_]", "", field.order_id)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"validations",children:"Validations"}),"\n",(0,i.jsxs)(n.p,{children:["To validate line items, create ",(0,i.jsx)(n.code,{children:"item_validator"})," formula field with the following code:"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"This is not the intended usage, and there will be a better way in the future. It works, however."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'import math\n\nitem_total_base_calculated = field.item_quantity * field.item_amount_base\n\nif not math.isclose(item_total_base_calculated, field.item_total_base, rel_tol=0.004):\n    item_total_base_diff = abs(item_total_base_calculated - field.item_total_base)\n    message = (f"The totals do not match. Expected total: {field.item_total_base}, "\n               f"Calculated total: {item_total_base_calculated}, "\n               f"Difference: {item_total_base_diff}")\n\n    show_error(message, field.item_quantity)\n    show_error(message, field.item_amount_base)\n    show_error(message, field.item_total_base)\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>r});var i=t(7294);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);